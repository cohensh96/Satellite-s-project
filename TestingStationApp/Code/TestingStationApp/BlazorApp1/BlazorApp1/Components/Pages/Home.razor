@page "/"
@using Microsoft.AspNetCore.Components.Forms
@using System.IO

<h1 class="title">Welcome to the testing station app</h1>

<div class="container">
    <div class="section">
        <h2>Introduction</h2>
        <p class="lead">
            To efficiently test algorithms on a dedicated on-board computer, this system was created. Each test begins with creating a dataset, consisting of time points for ANCAS, CATCH,or SBO-ANCAS, and determining the actual TCA for comparison. The testing setup comprises two components: the Test Station, responsible for data creation and result handling, and the Tested OBC which runs the algorithms and monitor time.
        </p>
    </div>

    <div class="section">
        <h2>Steps to Create a Test</h2>

        <div class="step">
            <h3>Step 1: Navigate to the "Create test" page</h3>
            <p>
                Navigate to the page or section of your Blazor application where the CreateTestPage component is located.
            </p>
        </div>

        <div class="step">
            <h3>Step 2: Provide Test Information</h3>
            <ol>
                <li><strong>Test Name:</strong> Enter a descriptive name for your test in the provided input field.</li>
                <li><strong>Set Test Parameters:</strong> Adjust the parameters as needed for your test. These parameters define the behavior and characteristics of the test.</li>
                <li>
                    <strong>Give Input Data Of The Orbiting Elements:</strong>
                    <ul>
                        <li>
                            If the data is stored in XML format, click on the "Choose File" button to select the input data file for the first orbiting element. <br>
                            Otherwise, copy the TLE of the lements into the text boxes
                        </li>
                        <li>Repeat the process to select the input data file for the second orbiting element.</li>
                    </ul>
                </li>
            </ol>
        </div>

        <div class="step">
            <h3>Step 3: Submit the Form</h3>
            <p>
                Once you have provided all the necessary information:
            </p>
            <ol>
                <li>Click on the "Submit" button to initiate the test creation process.</li>
                <li>Input validation will occur, followed by the test creation attempt.</li>
            </ol>
        </div>

        <div class="step">
            <h3>Step 4: Review Test Creation Result</h3>
            <p>
                After submitting the form, one of the following outcomes will occur:
            </p>
            <ul>
                <li><strong>Success:</strong> If the test creation is successful, a confirmation message will be displayed, indicating the test ID assigned to your newly created test.</li>
                <li><strong>Error:</strong> If there are any issues during test creation (e.g., missing input files, validation errors), an error message will be displayed, providing details about the issue encountered.</li>
            </ul>
        </div>
    </div>

    <div class="section">
        <h2>Working with a Full Catalog</h2>
        <p>
            The system also supports reading a <em>full catalog</em> containing many orbiting objects (e.g., a large file of TLE data).
            This can be useful if you wish to generate a large number of tests at once, such as "OneWithAll" or "AllWithAll" modes.
            In these modes, the Test Station will read the entire catalog, filter out orbits that are clearly not relevant, and then create
            multiple tests for each valid pairing or set of objects.
        </p>
        <p>
            <strong>For example:</strong> If you specify "OneWithAll," the system takes the first object in the catalog and generates tests
            against every other object that passes the pre-filter (such as Hoot’s geometric filter). In "AllWithAll," every pair of objects
            in the catalog is considered. This can greatly speed up workflow if you need to test a large dataset in one go.
        </p>
        <p>
            Make sure to provide the correct file path to your full catalog in the designated field (e.g., "gpCatalogFull.txt"). The system
            will parse each TLE, apply any necessary filters to discard irrelevant objects, and only then create test entries for
            valid pairs or sets of orbiting elements.
        </p>
        <p>
            Finally, all created tests will appear in the database and can be viewed in the "Test Results" page, allowing you to track the
            progress or outcome of each scenario derived from the full catalog.
        </p>

        <h3>Full Catalog File Structure</h3>
        <p>
            Each satellite in the full catalog is represented by exactly three lines in the text file:
        </p>
        <ol>
            <li>The <strong>first line</strong> is the satellite's <em>name</em>.</li>
            <li>The <strong>second line</strong> is the <em>first line</em> of the satellite's TLE.</li>
            <li>The <strong>third line</strong> is the <em>second line</em> of the satellite's TLE.</li>
        </ol>
        <p>
            To generate a suitable catalog file with this <strong>3-line format</strong>, you can use the tools at
            <a href="https://celestrak.org/NORAD/elements/index.php?FORMAT=tle" target="_blank">
                CelesTrak's official website
            </a>. Make sure to select the "TLE/3LE" option, which produces a text file where each satellite is exactly three lines: name, TLE line 1, and TLE line 2.
        </p>
    </div>

</div>
